// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`genForm {"application_id": "user", "fields": [Array], "label": "User", "version": "1.0.0"} 1`] = `
"import React, { useState, useEffect } from \\"react\\";
import { Formik, Form, useFormikContext, FormikConfig } from \\"formik\\";
import { FieldMap, Field, FieldAppendable } from \\"@omega/core\\";
import {
  InputFieldProps,
  createValidator,
  testCondRoot,
  SingleInputHTML,
  MultiInputHTML,
  InputFieldComponent,
} from \\"@omega/runtime\\";

/* Form value type */
export type FieldValueTypes = {
  name: string;
  age: number;
};

/* export const fieldMap: FieldMap = ... */
export const fieldMap: FieldMap = new Map<string, Field>([
  [
    \\"name\\",
    {
      field_id: \\"name\\",
      label: \\"Name\\",
      type: \\"text\\",
    },
  ],
  [
    \\"age\\",
    {
      field_id: \\"age\\",
      label: \\"Age\\",
      type: \\"number\\",
    },
  ],
]);

/* Component function for \\"name\\" */
export const NameFieldComponent: React.FC<InputFieldProps> = (props) => {
  return (
    <InputFieldComponent {...props}>
      <SingleInputHTML component=\\"input\\" {...props} />
    </InputFieldComponent>
  );
};

/* Component function for \\"age\\" */
export const AgeFieldComponent: React.FC<InputFieldProps> = (props) => {
  return (
    <InputFieldComponent {...props}>
      <SingleInputHTML component=\\"input\\" {...props} />
    </InputFieldComponent>
  );
};

/* Form component */
export type FormComponentProps = Omit<
  FormikConfig<FieldValueTypes>,
  \\"initialValues\\"
>;
export const FormComponent: React.FC<FormComponentProps> = ({
  children,
  ...props
}) => (
  <Formik
    validate={createValidator(fieldMap)}
    initialValues={
      {
        name: \\"\\",
        age: \\"\\",
      } as any
    }
    {...props}
  >
    <Form className=\\"omega-form\\">
      <div className=\\"omega-form__fields\\">
        {children}
        <NameFieldComponent name=\\"name\\" type=\\"text\\" label=\\"Name\\" />
        <AgeFieldComponent name=\\"age\\" type=\\"number\\" label=\\"Age\\" />
      </div>
      <div className=\\"omega-form__buttons\\">
        <button
          className=\\"omega-form__button omega-form__button--primary\\"
          type=\\"submit\\"
        >
          Submit
        </button>
      </div>
    </Form>
  </Formik>
);
"
`;

exports[`genForm {"application_id": "user", "fields": [Array], "label": "User", "version": "1.0.0"} 2`] = `
"import React, { useState, useEffect } from \\"react\\";
import { Formik, Form, useFormikContext, FormikConfig } from \\"formik\\";
import { FieldMap, Field, FieldAppendable } from \\"@omega/core\\";
import {
  InputFieldProps,
  createValidator,
  testCondRoot,
  SingleInputHTML,
  MultiInputHTML,
  InputFieldComponent,
} from \\"@omega/runtime\\";

/* Form value type */
export type FieldValueTypes = {
  name: string;
  age: number;
};

/* export const fieldMap: FieldMap = ... */
export const fieldMap: FieldMap = new Map<string, Field>([
  [
    \\"name\\",
    {
      field_id: \\"name\\",
      label: \\"Name\\",
      type: \\"text\\",
      valid_if: {
        $required: true,
      },
    },
  ],
  [
    \\"age\\",
    {
      field_id: \\"age\\",
      label: \\"Age\\",
      type: \\"number\\",
      valid_if: {
        $required: true,
      },
      shown_if: {
        name: {
          $required: true,
        },
      },
      disabled_if: {
        name: {
          $required: true,
        },
      },
    },
  ],
]);

/* Component function for \\"name\\" */
export const NameFieldComponent: React.FC<InputFieldProps> = (props) => {
  return (
    <InputFieldComponent required {...props}>
      <SingleInputHTML component=\\"input\\" {...props} />
    </InputFieldComponent>
  );
};

/* Component function for \\"age\\" */
export const AgeFieldComponent: React.FC<InputFieldProps> = (props) => {
  const { values, touched } = useFormikContext<FieldValueTypes>();
  /* shown_if */

  const [shown, setShown] = useState(
    testCondRoot(fieldMap.get(\\"age\\")!.shown_if!, values, fieldMap)
  );
  useEffect(
    () =>
      setShown(testCondRoot(fieldMap.get(\\"age\\")!.shown_if!, values, fieldMap)),
    [values.name, touched.name]
  );
  /* disabled_if */

  const [disabled, setDisabled] = useState(
    testCondRoot(fieldMap.get(\\"age\\")!.disabled_if!, values, fieldMap)
  );
  useEffect(
    () =>
      setDisabled(
        testCondRoot(fieldMap.get(\\"age\\")!.disabled_if!, values, fieldMap)
      ),
    [values.name, touched.name]
  );
  if (!shown) return <></>;
  return (
    <InputFieldComponent required {...props}>
      <SingleInputHTML component=\\"input\\" disabled={disabled} {...props} />
    </InputFieldComponent>
  );
};

/* Form component */
export type FormComponentProps = Omit<
  FormikConfig<FieldValueTypes>,
  \\"initialValues\\"
>;
export const FormComponent: React.FC<FormComponentProps> = ({
  children,
  ...props
}) => (
  <Formik
    validate={createValidator(fieldMap)}
    initialValues={
      {
        name: \\"\\",
        age: \\"\\",
      } as any
    }
    {...props}
  >
    <Form className=\\"omega-form\\">
      <div className=\\"omega-form__fields\\">
        {children}
        <NameFieldComponent name=\\"name\\" type=\\"text\\" label=\\"Name\\" />
        <AgeFieldComponent name=\\"age\\" type=\\"number\\" label=\\"Age\\" />
      </div>
      <div className=\\"omega-form__buttons\\">
        <button
          className=\\"omega-form__button omega-form__button--primary\\"
          type=\\"submit\\"
        >
          Submit
        </button>
      </div>
    </Form>
  </Formik>
);
"
`;

exports[`getInitialValue {"initial_value":"hello","multi":{"min":3}} 1`] = `
Array [
  "hello",
  "hello",
  "hello",
]
`;

exports[`getInitialValue {"initial_value":"hello","multi":true} 1`] = `
Array [
  "hello",
]
`;

exports[`getInitialValue {"initial_value":"hello"} 1`] = `"hello"`;

exports[`getInitialValue {"initial_value":["a","b"],"multi":{"min":3}} 1`] = `
Array [
  "a",
  "b",
  "",
]
`;

exports[`getInitialValue {"initial_value":["a","b"],"multi":true} 1`] = `
Array [
  "a",
  "b",
]
`;

exports[`getInitialValue {"initial_value":["a","b"]} 1`] = `[Error: "undefined" is wrongly configured. initial_value can be an array only when it is multi value field.]`;

exports[`getInitialValue {"multi":{"min":3}} 1`] = `
Array [
  "",
  "",
  "",
]
`;

exports[`getInitialValue {"multi":true} 1`] = `
Array [
  "",
]
`;

exports[`getInitialValue {} 1`] = `""`;
